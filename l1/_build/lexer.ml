# 3 "lexer.mll"
 
  open Parser
  open Lexing 

(* next_line copied from  Ch. 16 of "Real Workd Ocaml" *) 
let next_line lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <-
    { pos with pos_bol = lexbuf.lex_curr_pos;
               pos_lnum = pos.pos_lnum + 1
    }


# 16 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\235\255\001\000\237\255\015\000\240\255\000\000\000\000\
    \002\000\000\000\000\000\002\000\000\000\012\000\250\255\251\255\
    \000\000\253\255\254\255\255\255\238\255\249\255\248\255\004\000\
    \004\000\002\000\247\255\000\000\013\000\246\255\013\000\243\255\
    \245\255\016\000\008\000\244\255\015\000\013\000\021\000\242\255\
    \241\255\004\000\252\255\003\000\002\000\254\255\006\000\255\255\
    \253\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\020\000\255\255\016\000\255\255\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\255\255\255\255\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\003\000\003\000\255\255\003\000\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\042\000\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\003\000\003\000\045\000\002\000\045\000\000\000\
    \000\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\015\000\020\000\018\000\043\000\048\000\046\000\047\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\012\000\014\000\000\000\022\000\013\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\011\000\000\000\006\000\010\000\032\000\023\000\
    \036\000\009\000\033\000\024\000\027\000\025\000\028\000\040\000\
    \026\000\029\000\031\000\030\000\008\000\034\000\035\000\007\000\
    \037\000\038\000\039\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\002\000\044\000\000\000\041\000\255\255\
    \255\255\041\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\016\000\000\000\041\000\043\000\041\000\046\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\012\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\013\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\000\000\009\000\011\000\
    \007\000\000\000\008\000\023\000\010\000\024\000\010\000\006\000\
    \025\000\028\000\030\000\027\000\000\000\033\000\034\000\000\000\
    \036\000\037\000\038\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\041\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 22 "lexer.mll"
                    ( token lexbuf )
# 135 "lexer.ml"

  | 1 ->
# 23 "lexer.mll"
                    ( ADD )
# 140 "lexer.ml"

  | 2 ->
# 24 "lexer.mll"
              ( DEREF )
# 145 "lexer.ml"

  | 3 ->
# 25 "lexer.mll"
                     ( LPAREN )
# 150 "lexer.ml"

  | 4 ->
# 26 "lexer.mll"
                    ( RPAREN )
# 155 "lexer.ml"

  | 5 ->
# 27 "lexer.mll"
                    ( SEMICOLON )
# 160 "lexer.ml"

  | 6 ->
# 28 "lexer.mll"
                    ( GTE )
# 165 "lexer.ml"

  | 7 ->
# 29 "lexer.mll"
                ( ASSIGN )
# 170 "lexer.ml"

  | 8 ->
# 30 "lexer.mll"
                    ( BEGIN )
# 175 "lexer.ml"

  | 9 ->
# 31 "lexer.mll"
                    ( END )
# 180 "lexer.ml"

  | 10 ->
# 32 "lexer.mll"
              ( IF )
# 185 "lexer.ml"

  | 11 ->
# 33 "lexer.mll"
                ( THEN )
# 190 "lexer.ml"

  | 12 ->
# 34 "lexer.mll"
                ( ELSE )
# 195 "lexer.ml"

  | 13 ->
# 35 "lexer.mll"
                 ( WHILE )
# 200 "lexer.ml"

  | 14 ->
# 36 "lexer.mll"
              ( DO )
# 205 "lexer.ml"

  | 15 ->
# 37 "lexer.mll"
                    ( EOF )
# 210 "lexer.ml"

  | 16 ->
# 39 "lexer.mll"
                 ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 215 "lexer.ml"

  | 17 ->
# 40 "lexer.mll"
          ( comment lexbuf; token lexbuf )
# 220 "lexer.ml"

  | 18 ->
# 41 "lexer.mll"
             ( next_line lexbuf; token lexbuf )
# 225 "lexer.ml"

  | 19 ->
# 42 "lexer.mll"
         ( EOF )
# 230 "lexer.ml"

  | 20 ->
# 43 "lexer.mll"
       ( Errors.complain ("Lexer : Illegal character " ^ (Char.escaped(Lexing.lexeme_char lexbuf 0)))
)
# 236 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 41
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "lexer.mll"
         ( () )
# 248 "lexer.ml"

  | 1 ->
# 48 "lexer.mll"
            ( next_line lexbuf; comment lexbuf )
# 253 "lexer.ml"

  | 2 ->
# 49 "lexer.mll"
         (comment lexbuf; comment lexbuf )
# 258 "lexer.ml"

  | 3 ->
# 50 "lexer.mll"
      ( comment lexbuf )
# 263 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

