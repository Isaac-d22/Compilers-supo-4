type token =
  | INT of (int)
  | BOOL of (bool)
  | LOCATION of (int)
  | ADD
  | GTE
  | SEMICOLON
  | SKIP
  | DEREF
  | ASSIGN
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | LPAREN
  | RPAREN
  | BEGIN
  | END
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"

let get_loc = Parsing.symbol_start_pos 

# 29 "parser.ml"
let yytransl_const = [|
  260 (* ADD *);
  261 (* GTE *);
  262 (* SEMICOLON *);
  263 (* SKIP *);
  264 (* DEREF *);
  265 (* ASSIGN *);
  266 (* IF *);
  267 (* THEN *);
  268 (* ELSE *);
  269 (* WHILE *);
  270 (* DO *);
  271 (* LPAREN *);
  272 (* RPAREN *);
  273 (* BEGIN *);
  274 (* END *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* LOCATION *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\001\000\003\000\003\000\002\000\
\003\000\006\000\004\000\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\
\000\000\015\000\005\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\004\000\000\000\012\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\011\000\018\000\019\000"

let yysindex = "\255\255\
\007\255\000\000\252\254\000\000\006\255\007\255\007\255\007\255\
\007\255\000\000\000\000\004\000\007\255\000\000\039\255\027\255\
\254\254\043\255\003\255\007\255\007\255\000\000\047\255\007\255\
\007\255\000\000\007\255\000\000\011\255\047\255\030\255\047\255\
\000\000\007\255\047\255"

let yyrindex = "\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\255\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\010\000\028\000\000\000\037\000\
\000\000\000\000\046\000"

let yygindex = "\000\000\
\000\000\000\000\005\000\006\000"

let yytablesize = 320
let yytable = "\001\000\
\002\000\020\000\021\000\022\000\013\000\012\000\014\000\003\000\
\004\000\006\000\015\000\016\000\017\000\026\000\005\000\021\000\
\006\000\023\000\009\000\007\000\028\000\008\000\013\000\009\000\
\029\000\030\000\000\000\007\000\031\000\032\000\020\000\021\000\
\033\000\020\000\021\000\000\000\011\000\000\000\035\000\000\000\
\025\000\034\000\020\000\021\000\000\000\010\000\020\000\021\000\
\027\000\024\000\020\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\002\000\002\000\020\000\
\021\000\000\000\000\000\002\000\002\000\006\000\002\000\006\000\
\002\000\000\000\002\000\000\000\006\000\006\000\000\000\006\000\
\009\000\006\000\000\000\006\000\000\000\009\000\009\000\000\000\
\009\000\007\000\009\000\000\000\009\000\000\000\007\000\007\000\
\000\000\007\000\011\000\007\000\000\000\007\000\000\000\011\000\
\011\000\000\000\011\000\010\000\011\000\000\000\011\000\000\000\
\010\000\010\000\000\000\010\000\000\000\010\000\000\000\010\000"

let yycheck = "\001\000\
\000\000\004\001\005\001\000\000\009\001\001\000\001\001\001\001\
\002\001\000\000\006\000\007\000\008\000\016\001\008\001\005\001\
\010\001\013\000\000\000\013\001\018\001\015\001\018\001\017\001\
\020\000\021\000\255\255\000\000\024\000\025\000\004\001\005\001\
\027\000\004\001\005\001\255\255\000\000\255\255\034\000\255\255\
\014\001\012\001\004\001\005\001\255\255\000\000\004\001\005\001\
\006\001\011\001\004\001\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\006\001\004\001\
\005\001\255\255\255\255\011\001\012\001\004\001\014\001\006\001\
\016\001\255\255\018\001\255\255\011\001\012\001\255\255\014\001\
\006\001\016\001\255\255\018\001\255\255\011\001\012\001\255\255\
\014\001\006\001\016\001\255\255\018\001\255\255\011\001\012\001\
\255\255\014\001\006\001\016\001\255\255\018\001\255\255\011\001\
\012\001\255\255\014\001\006\001\016\001\255\255\018\001\255\255\
\011\001\012\001\255\255\014\001\255\255\016\001\255\255\018\001"

let yynames_const = "\
  ADD\000\
  GTE\000\
  SEMICOLON\000\
  SKIP\000\
  DEREF\000\
  ASSIGN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  LPAREN\000\
  RPAREN\000\
  BEGIN\000\
  END\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  LOCATION\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 29 "parser.mly"
                         ( _1 )
# 207 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 32 "parser.mly"
                                     ( Past.Integer (get_loc(), _1) )
# 214 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 33 "parser.mly"
                                     ( Past.Bool (get_loc(), _1) )
# 221 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 34 "parser.mly"
                                     ( _2 )
# 228 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 37 "parser.mly"
                                     (  _1 )
# 235 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 38 "parser.mly"
                                     ( Past.Op(get_loc(), _1, Past.ADD, _3) )
# 243 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 39 "parser.mly"
                                     ( Past.Op(get_loc(), _1, Past.GTE, _3) )
# 251 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 40 "parser.mly"
                                ( Past.Deref(get_loc(), _2) )
# 258 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 41 "parser.mly"
                      ( Past.Assign(get_loc(), _1, _3) )
# 266 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Past.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 42 "parser.mly"
                                     ( Past.If(get_loc(), _2, _4, _6) )
# 275 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 43 "parser.mly"
                            ( Past.While(get_loc(), _2, _4) )
# 283 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Past.expr list) in
    Obj.repr(
# 44 "parser.mly"
                                     ( Past.Seq(get_loc(), _2) )
# 290 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 47 "parser.mly"
                                     ( [_1] )
# 297 "parser.ml"
               : Past.expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr list) in
    Obj.repr(
# 48 "parser.mly"
                                     ( _1 :: _3  )
# 305 "parser.ml"
               : Past.expr list))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Past.expr)
